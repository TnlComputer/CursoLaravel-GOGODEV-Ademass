VSC
XAMPP
COMPOSER
MariaDB o Mysql, mongo o el que preferimos
Node.js (el recomendado, la version estable)


chequear las vareables de entorno
para que esten siempre disponibles los ponemos en variables del sistema

instalador de laravel para crear las aplicaciones sin necesitad de composer

1ra forma de crear mi proyecto

  composer create-project laravel/laravel miproyecto 

2da forma

  laravel new nombreDelProyecto


instalar laravel en forma global

composer require laravel/installer


levantar el serve

php artisan serve

*--------------------------------*


breeze

instalar
composer require laravel/breeze

despues 

php artisan breeze:install vue o react o el que queremos usar con blade para saber como renderizar la applicacion

php artisan breeze:install vue --ssr //  inertia   ssr (server site rendering)
                                                api //next o new para tr4abajar con esa tecnologia

php artisan breeze:install        --dark // para gestion el tema claro y oscuro

php artisan breeze:install


*--------------------------------*


Jetstream
despues de crear el proyecto de jetstream nos posicionamos en el directorio del proyecto
cd authjetstream x ejemplo
instalar 
composer require laravel/jetstream

php artisan jetstream:install livewire o inertia --teams (para utilizar equipos dentro de las autenticaciones en inertia), con inertia tambien podemos hacer --ssr y/o --dark 

despues instalamos las dependencias y migramos las tablas y levantamos el servidor
npm install
npm run dev 
php artisan migrate
php artisan serve

*--------------------------------*


LIVEWIRE
instalamos un nuevo proyecto 
con laravel new nombre proycto, ejemplo livewireexample
entramos a la carpeta del proyecto
composer require livewire/livewire


incluir livewire en el layouts con @livewireStyles

ejemplo de como se llama al componente
<button wire:click="increment">Increment</button>

ciclo de vida -  hocks
    public function mount()
    {
        $this->fill(['count' => 25]);
    }

esto hace que en lugar de iniciar en 0, inicia en 25.

<div class="d-none d-sm-block">
  Hello Word
</div>

despues es crud es igual que siempre pero dentro del archo de livewire, ejemplo Notes.php de la carpeta livewire del proyecto.

*---------------------------------------*

INERTIA
puede utilizar VueJs, ReactJs

instalamos el pryecto de laravel
entramos al projecto e instalamos 
composer require laravel/jetstream
php artisan jetstream:install inertia

*---------------------------------------*

File Storage

 filesystem.php en la carpeta config del proyecto
 todas las modificaciones no se hacen en filesystem.php, sino en el .env como siempre


# FILESYSTEM_DISK="s3" // o como local o ftp o sftp
# si es 's3' tenemos que tener todas las variables para poder acceder al almacenado de amazon web service


*---------------------------------------*



Localizacion

necesitamos la carpeta lang en donde se agregan los lenguajes, uno por cada uno

la configuracion la hacemos en la carpeta config/app.php

#    'timezone' => 'UTC',
      'timezone' => 'America/Argentina/Buenos_Aires',

#    'locale' => 'en',
      'locale' => 'es',

#    'fallback_locale' => 'en',
      'fallback_locale' => 'es',

#    'faker_locale' => 'en_US',
      'faker_locale' => 'es_AR',

  $msg = __('welcome.greetings', ['name' => 'Jorge']);

  welcome es el archivo en la carpeta de cada lenguaje, la podemos crear nosotros y poner las variable para que tengan la traduccion, esto tiene que ser en cada lenguaje.
  

*---------------------------------------*

asset bind con VITE

instalar Node

npm i  con eso instala las dependencias que necesitamos 

configuramos el archivo vite.config.js para agregar los recursos que necesitamos

en una apw se importa el app.css para que no de error

import "../css/app.css"; // si es una APW


*---------------------------------------*
Dompdf

instalar dompdf 
composer require barryvdh/laravel-dompdf

para copiar la configuracion de DomPDF a config tenemos que hacer

php artisan vendor:publish --provider="Barryvdh\DomPDF\ServiceProvider"


*---------------------------------------*
Import Export CSV libreria

para instalarla hacemos

composer require maatwebsite/excel -W

en el php.inicia
habilitar las extensiones gd y zip
sin eso da error la instalacion


import
php artisan make:import ProductImport --model=Product

el --model=Prodcut es para que agregue a la importacion el model de procutos

    public function import(Request $request)
    {
        $request->validate([
            'document_csv' => 'required|mimes:csv|max:2048'
        ]);

        try {
            $file = $request->file('document_csv');
            Excel::import(new ProductImport, $file);
            return redirect()->route('index');
        } catch (\Exception $e) {
            dd("Error importing");
        }
    }

Exportar archivo Config
php artisan vendor:publish --provider="Maatwebsite\Excel\ExcelServiceProvider" --tag=config

    public function export()
    {
        return Excel::download(new ProductsExport, 'products.csv');
    }


*---------------------------------------*


Utilidades

Paginacion

tenemos 2 
pagination y simplePagination

para personalizar la vista, podemos traer de vendor con este comando

php artisan vendor:publish --tag=laravel-pagination

asi con esa instruciones podemos modificar a nuestro gusto la plantilla blade en donde podemos decirle cual usar en la llamada a los link

{{ $users->links('bootstrap-5.blade.php') }} 

asi usa esta vista en lugar de la default, tambien le podemos pasar parametros, pero es conveniente modificar como se ve, asi no tenemos que modificar toda la Paginacion



TESTING

testing unitarios

php artisan make:test UserTest

